openapi: "3.0.0"
info:
  version: "1.0.0"
  title: moimmoim
  description: 회원가입, 로그인, 회원 상세 조회, JWT 토큰 관리를 포함한 API 문서
servers:
  - url: "http://localhost:80"
  - url: "http://moimmoim.duckdns.org"

tags:
  - name: auth
    description: 인증 관련 API
  - name: user
    description: 사용자 관련 API

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: 회원가입
      description: 새로운 사용자를 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        201:
          description: 회원가입 성공
        400:
          description: 잘못된 요청

  /auth/login:
    post:
      tags:
        - auth
      summary: 로그인
      description: 사용자가 로그인하고 JWT 토큰을 받습니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        200:
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: 인증 실패 - 잘못된 자격 증명

  /auth/requestEmail:
    post:
      tags:
        - auth
      summary: 이메일 인증 요청
      description: 이메일 인증 요청
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "ounsy0612@gmail.com"
      responses:
        201:
          description: 성공
        400:
          description: 실패 - 이메일 누락
        500:
          description: 서버 에러

  /auth/confirmEmail:
    post:
      tags:
        - auth
      summary: 이메일 인증 확인
      description: 이메일 인증 확인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "ounsy0612@gmail.com"
                code:
                  type: string
                  example: "432684"
      responses:
        201:
          description: 성공
        400:
          description: 실패 - 이메일 누락
        500:
          description: 서버 에러

  /auth/interests:
    get:
      tags:
        - auth
      summary: 관심사 리스트
      description: 관심사 리스트
      responses:
        201:
          description: 성공
        500:
          description: 서버 에러

  /user/myInfo:
    get:
      tags:
        - user
      summary: 회원 상세 조회
      description: JWT 토큰을 사용하여 회원 정보를 조회합니다.
      security:
        - BearerAuth: []

      responses:
        200:
          description: 회원 상세 정보
        401:
          description: 인증 실패 - 토큰 없음 또는 유효하지 않은 토큰

  /moim/category:
    get:
      tags:
        - moim
      summary: 모임 카테고리 조회
      description: 모임 카테고리를 조회한다.
      responses:
        200:
          description: 모임 카테고리
  /moim/myMoim/{users_id}:
    get:
      tags:
        - moim
      summary: 나의 모임 조회
      description: 나의 모임을 조회한다.
      parameters:
        - name: users_id
          in: query
          required: true
          schema:
            type: int
            example: 1
  /moim/setMoimLogo:
    post:
      tags:
        - moim
      summary: 모임 로고 지정
      description: 모임 로고 이미지 추가
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  format: binary
                  description: 파일 업로드
                meetings_id:
                  type: int
                  description: 모임 아이디
      responses:
        200:
          description: 성공
        400:
          description: 실패 - 이메일 누락
        500:
          description: 서버 에러

  /moim/inviteList/{users_id}/{meetings_id}:
    get:
      tags:
        - moim
      summary: 초대 조회
      description: 나의 초대 목록을 조회한다.
      parameters:
        - name: users_id
          in: query
          required: true
          schema:
            type: int
            example: 1
        - name: meetings_id
          in: query
          required: true
          schema:
            type: int
            example: 1

  /moim/getMoreMessage:
    post:
      tags:
        - moim
      summary: 채팅 메세지 더 불러오기
      description: 채팅 메세지 더 불러오기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meetings_id:
                  type: int
                  example: 1
                length:
                  type: int
                  example: 20

  /address/search:
    get:
      tags:
        - address
      summary: 주소 검색
      description: 키워드와 일치하는 주소 검색
      parameters:
        - name: keyword
          in: query
          required: true
          schema:
            type: string
            example: "태평동"
  /address/createAddress:
    post:
      tags:
        - address
      summary: 주소 추가 및 수정
      description: 주소 추가 및 수정하기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address_name:
                  type: string
                  example: "시 구 동"
                region_1depth_name:
                  type: string
                  example: "시"
                region_2depth_name:
                  type: string
                  example: "구"
                region_3depth_name:
                  type: string
                  example: "동"
                prev_address_id:
                  type: int
                  example: 1
#스키마 설정
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        nickname:
          type: string
          example: "John Doe"
        password:
          type: string
          example: ""
        passwordCheck:
          type: string
          example: ""
        birthdate:
          type: string
          example: "9106121"
        interests:
          type: array
          items:
            type: integer
          example: [1, 8]
        addresses:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                example: "논현1동"
              address_code:
                type: string
                example: "AAA"

    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: "tndduf123"
        password:
          type: string
          example: "tndduf"
